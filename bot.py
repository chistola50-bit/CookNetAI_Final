import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.executor import start_webhook
from database import (
    init_db, upsert_user,
    add_recipe, get_recipes, like_recipe, get_random_recipe,
    set_chat_sub, set_daily_sub,
    get_chat_subscribers_chat_ids, get_daily_subscribers_chat_ids,
    save_chat_message, get_recent_chat_messages
)
from config import TOKEN, COOKNET_URL

logging.basicConfig(level=logging.INFO)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
init_db()

# === URL –∏ PORT –¥–ª—è Render ===
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL", "https://cooknetai-final.onrender.com")
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH
WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.getenv("PORT", 10000))

# === –ö–ù–û–ü–ö–ò ===
def main_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üç≥ –û—Ç–∫—Ä—ã—Ç—å CookNet", url=COOKNET_URL),
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data="add"),
        InlineKeyboardButton("üèÜ –¢–æ–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤", callback_data="top"),
        InlineKeyboardButton("üí¨ –û–±—â–∏–π —á–∞—Ç", callback_data="chat_on"),
        InlineKeyboardButton("üîî –†–µ—Ü–µ–ø—Ç –¥–Ω—è", callback_data="daily_on")
    )
    return kb

# === –ö–û–ú–ê–ù–î–´ ===
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    upsert_user(message.from_user.id, message.from_user.username, message.chat.id)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç, —à–µ—Ñ!\n\n"
        "CookNet –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∫—É–ª–∏–Ω–∞—Ä–∞–º–∏.",
        reply_markup=main_keyboard()
    )

@dp.message_handler(commands=['top'])
async def cmd_top(message: types.Message):
    recipes = get_recipes(limit=5)
    if not recipes:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ üòÖ –î–æ–±–∞–≤—å —Å–≤–æ–π —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ ‚ûï")
        return
    for r in recipes:
        recipe_id, _, username, title, desc, photo, likes = r
        caption = f"üçΩ {title}\nüë§ @{username or 'anon'}\n‚ù§Ô∏è {likes}\n\n{desc}"
        kb = InlineKeyboardMarkup().add(InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{recipe_id}"))
        await bot.send_photo(message.chat.id, photo, caption=caption, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("like_"))
async def cb_like(call: types.CallbackQuery):
    recipe_id = int(call.data.split("_")[1])
    like_recipe(recipe_id)
    await call.answer("‚ù§Ô∏è –õ–∞–π–∫ –∑–∞—Å—á–∏—Ç–∞–Ω!")

# === –°–¢–ê–†–¢ WEBHOOK ===
async def on_startup(dp):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set to {WEBHOOK_URL}")

async def on_shutdown(dp):
    logging.warning("–£–¥–∞–ª—è–µ–º webhook...")
    await bot.delete_webhook()

if __name__ == "__main__":
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host=WEBAPP_HOST,
        port=WEBAPP_PORT,
    )
