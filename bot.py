import logging
import asyncio
from datetime import datetime, timedelta, time
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import web

from config import TOKEN, COOKNET_URL
from database import (
    init_db, upsert_user,
    add_recipe, get_recipes, like_recipe, get_random_recipe,
    set_chat_sub, set_daily_sub,
    get_chat_subscribers_chat_ids, get_daily_subscribers_chat_ids,
    save_chat_message, get_recent_chat_messages
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
init_db()

# URL –¥–ª—è Render (–∑–∞–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
WEBHOOK_HOST = "https://cooknet-ai.onrender.com"  # —Å—é–¥–∞ –≤–ø–∏—à–∏ –∞–¥—Ä–µ—Å Render
WEBHOOK_PATH = f"/webhook/{TOKEN}"
WEBHOOK_URL = WEBHOOK_HOST + WEBHOOK_PATH

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_keyboard():
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("üç≥ –û—Ç–∫—Ä—ã—Ç—å CookNet", url=COOKNET_URL),
        InlineKeyboardButton("üèÜ –¢–æ–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤", callback_data="top"),
        InlineKeyboardButton("üí¨ –û–±—â–∏–π —á–∞—Ç", callback_data="chat_on")
    )
    return kb

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    upsert_user(message.from_user.id, message.from_user.username, message.chat.id)
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç, —à–µ—Ñ!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CookNet AI üç≥\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ü–µ–ø—Ç–∞–º–∏, –ª–∞–π–∫–∞—Ç—å –∏ –æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–≤–∞—Ä–∞–º–∏!",
        reply_markup=main_keyboard()
    )

@dp.message_handler(commands=['add'])
async def cmd_add(message: types.Message):
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞.")
    dp.register_message_handler(handle_photo_step, content_types=['photo'], chat_id=message.chat.id, once=True)

async def handle_photo_step(message: types.Message):
    if not message.photo:
        await message.answer("–ù—É–∂–Ω–æ —Ñ–æ—Ç–æ üì∑. –í–≤–µ–¥–∏—Ç–µ /add –µ—â—ë —Ä–∞–∑.")
        return
    photo_id = message.photo[-1].file_id
    await message.answer("‚úèÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞.")
    dp.register_message_handler(lambda m: handle_title_step(m, photo_id), chat_id=message.chat.id, once=True)

async def handle_title_step(message: types.Message, photo_id):
    title = message.text.strip()
    await message.answer("üìù –û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞.")
    dp.register_message_handler(lambda m: handle_desc_step(m, photo_id, title), chat_id=message.chat.id, once=True)

async def handle_desc_step(message: types.Message, photo_id, title):
    desc = message.text.strip()
    add_recipe(message.from_user.id, message.from_user.username, title, desc, photo_id)
    await message.answer("‚úÖ –†–µ—Ü–µ–ø—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –°–ø–∞—Å–∏–±–æ, —à–µ—Ñ üë®‚Äçüç≥")

# --- –¢–æ–ø —Ä–µ—Ü–µ–ø—Ç–æ–≤ ---
async def show_top(chat_id):
    recipes = get_recipes(limit=5)
    if not recipes:
        await bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ üòÖ –î–æ–±–∞–≤—å —Å–≤–æ–π —Å –ø–æ–º–æ—â—å—é /add")
        return
    for r in recipes:
        recipe_id, user_id, username, title, description, photo, likes = r
        caption = f"üçΩ {title}\nüë§ @{username or 'anon'}\n‚ù§Ô∏è {likes}\n\n{description}"
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{recipe_id}"))
        await bot.send_photo(chat_id, photo, caption=caption, reply_markup=kb)

@dp.message_handler(commands=['top'])
async def cmd_top(message: types.Message):
    await show_top(message.chat.id)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("like_"))
async def cb_like(call: types.CallbackQuery):
    recipe_id = int(call.data.split("_")[1])
    like_recipe(recipe_id)
    await call.answer("‚ù§Ô∏è –õ–∞–π–∫ –∑–∞—Å—á–∏—Ç–∞–Ω!")

# --- –ß–∞—Ç ---
@dp.callback_query_handler(lambda c: c.data == "chat_on")
async def cb_chat_on(call: types.CallbackQuery):
    set_chat_sub(call.from_user.id, True)
    await call.message.answer("‚úÖ –í—ã –≤–æ—à–ª–∏ –≤ –æ–±—â–∏–π —á–∞—Ç.\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/chat –≤–∞—à_—Ç–µ–∫—Å—Ç")
    await call.answer()

@dp.message_handler(commands=['chat'])
async def cmd_chat(message: types.Message):
    upsert_user(message.from_user.id, message.from_user.username, message.chat.id)
    text = message.text.replace("/chat", "", 1).strip()
    if not text:
        await message.answer("–ù–∞–ø–∏—à–∏ —Ç–∞–∫: /chat –≤–∞—à_—Ç–µ–∫—Å—Ç")
        return

    save_chat_message(message.from_user.id, message.from_user.username, text)
    subscribers = get_chat_subscribers_chat_ids(exclude_user_id=message.from_user.id)
    if not subscribers:
        await message.answer("–ü–æ–∫–∞ –≤ —á–∞—Ç–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π üòâ")
        return

    out = f"üë§ @{message.from_user.username or 'user'}:\n{text}"
    for chat_id in subscribers:
        try:
            await bot.send_message(chat_id, out)
        except Exception:
            pass
    await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ–±—â–∏–π —á–∞—Ç")

# --- Webhook —Å–µ—Ä–≤–µ—Ä ---
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set to {WEBHOOK_URL}")

async def on_shutdown(app):
    logging.warning("Shutting down...")
    await bot.delete_webhook()
    await bot.session.close()

async def handle_webhook(request):
    update = await request.json()
    update = types.Update(**update)
    await dp.process_update(update)
    return web.Response()

app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_webhook)

app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == '__main__':
    web.run_app(app, host='0.0.0.0', port=10000)
